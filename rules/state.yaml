name: State Management
description: Rules for managing application state
pattern: src/lib/store/**/*.ts
conventions:
  - Use React Context for global state when needed
  - Implement zustand for complex state management
  - Use TanStack Query for server state management
  - Leverage URL state for shareable UI state
  - Keep state logic separated from components
implementation:
  structure: |
    // store/auth-store.ts
    import { create } from 'zustand'
    import { useQuery } from '@tanstack/react-query'
    import { useSearchParams } from 'next/navigation'

    interface AuthStore {
      user: User | null
      setUser: (user: User | null) => void
    }

    export const useAuthStore = create<AuthStore>((set) => ({
      user: null,
      setUser: (user) => set({ user })
    }))

    // Example TanStack Query usage
    export function useUser(id: string) {
      return useQuery({
        queryKey: ['user', id],
        queryFn: () => fetchUser(id)
      })
    }

    // Example URL state usage
    export function useFilterParams() {
      const searchParams = useSearchParams()
      return {
        category: searchParams.get('category'),
        sort: searchParams.get('sort')
      }
    }
best_practices:
  - Follow immutable state patterns
  - Include proper TypeScript types
  - Use TanStack Query for caching and synchronizing server state
  - Implement URL state for shareable UI state
  - Support for Server Components state handling
  - Implement proper data revalidation strategies
  - Use optimistic updates where appropriate
