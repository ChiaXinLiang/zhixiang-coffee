name: Middleware
description: Rules for implementing Next.js middleware
pattern: src/middleware.ts
conventions:
  - Use middleware for request/response modifications
  - Implement authentication checks
  - Handle redirects and rewrites
implementation:
  structure: |
    import { NextResponse } from 'next/server'
    import type { NextRequest } from 'next/server'
    
    export function middleware(request: NextRequest) {
      // Authentication check
      const token = request.cookies.get('token')
      
      if (!token && request.nextUrl.pathname.startsWith('/protected')) {
        return NextResponse.redirect(new URL('/login', request.url))
      }
      
      return NextResponse.next()
    }
    
    export const config = {
      matcher: ['/protected/:path*', '/api/:path*']
    }
best_practices:
  - Keep middleware logic minimal
  - Use TypeScript for type safety
  - Implement proper error handling
  - Follow Edge Runtime constraints
  - Support for react-server condition
